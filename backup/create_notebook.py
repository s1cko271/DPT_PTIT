import json
import os

# Tạo notebook theo cấu trúc chuẩn
notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Audio Feature Extraction\n",
                "\n",
                "Notebook này sử dụng thư viện librosa để trích xuất đặc trưng âm thanh từ các file audio. Các đặc trưng trích xuất bao gồm:\n",
                "- RMS energy\n",
                "- Zero-crossing rate\n",
                "- Spectral centroid\n",
                "- Spectral bandwidth\n",
                "- Spectral rolloff\n",
                "- MFCCs\n",
                "- Chroma features"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "source": [
                "import numpy as np\n",
                "import librosa\n",
                "import os\n",
                "import pandas as pd\n",
                "import matplotlib.pyplot as plt\n",
                "from tqdm import tqdm\n",
                "import sqlite3"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "source": [
                "def extract_features(file_path, tempo=None):\n",
                "    \"\"\"\n",
                "    Trích xuất đặc trưng từ file âm thanh\n",
                "    \n",
                "    Parameters:\n",
                "    -----------\n",
                "    file_path : str\n",
                "        Đường dẫn đến file âm thanh\n",
                "    tempo : float, optional\n",
                "        Tempo của file âm thanh (nếu đã biết)\n",
                "        \n",
                "    Returns:\n",
                "    --------\n",
                "    features : list\n",
                "        Danh sách các đặc trưng được trích xuất\n",
                "    \"\"\"\n",
                "    # Load file âm thanh\n",
                "    y, sr = librosa.load(file_path, sr=None)\n",
                "    \n",
                "    # Trích xuất tempo nếu chưa được cung cấp\n",
                "    if tempo is None:\n",
                "        tempo, _ = librosa.beat.beat_track(y=y, sr=sr)\n",
                "    \n",
                "    # Tạo frame từ tempo (28 frame được định nghĩa từ tempo)\n",
                "    frame_length = sr * 60 / tempo\n",
                "    frames = [int(i * frame_length) for i in range(29)]\n",
                "    \n",
                "    # Khởi tạo danh sách để lưu features\n",
                "    features = []\n",
                "    \n",
                "    for i in range(28):\n",
                "        # Tính thời điểm bắt đầu và kết thúc của mỗi frame\n",
                "        start = frames[i]\n",
                "        end = frames[i+1]\n",
                "        \n",
                "        # Lấy dữ liệu trong frame\n",
                "        frame_data = y[start:end]\n",
                "        \n",
                "        if len(frame_data) == 0:\n",
                "            continue\n",
                "        \n",
                "        # Trích xuất đặc trưng\n",
                "        feature_row = [i, i * tempo/60]\n",
                "        \n",
                "        # Thêm root mean square energy\n",
                "        rms = np.float32(np.sqrt(np.mean(frame_data**2)))\n",
                "        feature_row.append(rms)\n",
                "        \n",
                "        # Thêm zero crossing rate\n",
                "        zcr = np.float64(np.mean(librosa.feature.zero_crossing_rate(frame_data)))\n",
                "        feature_row.append(zcr)\n",
                "        \n",
                "        # Spectral centroid\n",
                "        spectral_centroid = np.float64(np.mean(librosa.feature.spectral_centroid(y=frame_data, sr=sr)))\n",
                "        feature_row.append(spectral_centroid)\n",
                "        \n",
                "        # Thêm spectral bandwidth\n",
                "        spectral_bandwidth = np.float64(np.mean(librosa.feature.spectral_bandwidth(y=frame_data, sr=sr)))\n",
                "        feature_row.append(spectral_bandwidth)\n",
                "        \n",
                "        # Thêm spectral rolloff\n",
                "        spectral_rolloff = np.float64(np.mean(librosa.feature.spectral_rolloff(y=frame_data, sr=sr)))\n",
                "        feature_row.append(spectral_rolloff)\n",
                "        \n",
                "        # Thêm MFCCs (4 hệ số đầu tiên)\n",
                "        mfccs = librosa.feature.mfcc(y=frame_data, sr=sr, n_mfcc=4)\n",
                "        for mfcc in mfccs:\n",
                "            feature_row.append(np.float32(np.mean(mfcc)))\n",
                "        \n",
                "        # Thêm chroma features\n",
                "        chroma = np.float32(np.mean(librosa.feature.chroma_stft(y=frame_data, sr=sr)))\n",
                "        feature_row.append(chroma)\n",
                "        \n",
                "        features.append(feature_row)\n",
                "    \n",
                "    return features"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "source": [
                "def save_features_to_csv(features, output_file='features.csv'):\n",
                "    \"\"\"\n",
                "    Lưu đặc trưng vào file CSV\n",
                "    \n",
                "    Parameters:\n",
                "    -----------\n",
                "    features : list\n",
                "        Danh sách các đặc trưng được trích xuất\n",
                "    output_file : str\n",
                "        Đường dẫn đến file CSV đầu ra\n",
                "    \"\"\"\n",
                "    # Tạo DataFrame từ features\n",
                "    columns = [\n",
                "        'frame', 'time', 'rms', 'zero_crossing_rate', \n",
                "        'spectral_centroid', 'spectral_bandwidth', 'spectral_rolloff',\n",
                "        'mfcc1', 'mfcc2', 'mfcc3', 'mfcc4', 'chroma'\n",
                "    ]\n",
                "    \n",
                "    df = pd.DataFrame(features, columns=columns)\n",
                "    \n",
                "    # Lưu vào CSV\n",
                "    df.to_csv(output_file, index=False)\n",
                "    \n",
                "    print(f\"Đã lưu features vào {output_file}\")\n",
                "    return df"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "source": [
                "def update_database(features_df, db_path='audio_features.db'):\n",
                "    \"\"\"\n",
                "    Cập nhật database với các đặc trưng mới\n",
                "    \n",
                "    Parameters:\n",
                "    -----------\n",
                "    features_df : pandas.DataFrame\n",
                "        DataFrame chứa các đặc trưng\n",
                "    db_path : str\n",
                "        Đường dẫn đến file database\n",
                "    \"\"\"\n",
                "    # Kết nối với database\n",
                "    conn = sqlite3.connect(db_path)\n",
                "    \n",
                "    try:\n",
                "        # Kiểm tra xem bảng features đã tồn tại chưa\n",
                "        cursor = conn.cursor()\n",
                "        cursor.execute('''\n",
                "        SELECT name FROM sqlite_master WHERE type='table' AND name='features'\n",
                "        ''')\n",
                "        \n",
                "        if cursor.fetchone() is None:\n",
                "            # Tạo bảng nếu chưa tồn tại\n",
                "            cursor.execute('''\n",
                "            CREATE TABLE features (\n",
                "                id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
                "                frame INTEGER,\n",
                "                time REAL,\n",
                "                rms REAL,\n",
                "                zero_crossing_rate REAL,\n",
                "                spectral_centroid REAL,\n",
                "                spectral_bandwidth REAL,\n",
                "                spectral_rolloff REAL,\n",
                "                mfcc1 REAL,\n",
                "                mfcc2 REAL,\n",
                "                mfcc3 REAL,\n",
                "                mfcc4 REAL,\n",
                "                chroma REAL\n",
                "            )\n",
                "            ''')\n",
                "        else:\n",
                "            # Xóa dữ liệu cũ nếu bảng đã tồn tại\n",
                "            cursor.execute('DELETE FROM features')\n",
                "        \n",
                "        # Lưu DataFrame vào database\n",
                "        features_df.to_sql('features', conn, if_exists='append', index=False)\n",
                "        \n",
                "        print(f\"Đã cập nhật database thành công tại {db_path}\")\n",
                "        \n",
                "    finally:\n",
                "        conn.close()"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.9.7"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Lưu notebook vào file
with open("code_test.ipynb", "w", encoding="utf-8") as f:
    json.dump(notebook, f, ensure_ascii=False, indent=1)

print("Đã tạo thành công file code_test.ipynb") 