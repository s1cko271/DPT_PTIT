import streamlit as st
import os
import time
import tempfile
from audio_processing_pipeline import AudioProcessingPipeline

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="T√¨m ki·∫øm nh·∫°c t∆∞∆°ng t·ª±",
    page_icon="üéµ",
    layout="wide"
)

# CSS t·ªëi ∆∞u - compact v√† ƒë·∫πp m·∫Øt
st.markdown("""
<style>
    /* ·∫®n menu v√† footer c·ªßa Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .css-1rs6os {visibility: hidden;}
    .css-17eq0hr {visibility: hidden;}
    
    /* ·∫®n sidebar toggle */
    .css-1d391kg {display: none;}
    
    /* Lo·∫°i b·ªè padding d∆∞ th·ª´a */
    .main .block-container {
        padding: 1rem 1rem 0rem;
        max-width: 800px;
        margin: 0 auto;
    }
    
    /* Header compact */
    h1 {
        color: #1E88E5;
        text-align: center;
        margin: 0 0 2rem 0;
        font-size: 2.2rem;
        font-weight: 600;
    }
    
    h3 {
        margin: 1rem 0 0.5rem 0;
        font-size: 1.3rem;
    }
    
    /* File uploader ƒë∆°n gi·∫£n */
    .stFileUploader {
        margin: 1rem 0;
        padding: 1rem;
        border: 2px dashed #1E88E5;
        border-radius: 10px;
        background: #f8f9fa;
    }
    
    /* Result items compact v√† ƒë·∫πp */
    .result-item {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Similarity score ƒë·∫πp h∆°n */
    .similarity-score {
        background: #1E88E5;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
        text-align: center;
    }
    
    /* Audio player compact */
    .stAudio {
        margin: 0.5rem 0;
    }
    
    /* Success message ƒë∆°n gi·∫£n */
    .stSuccess {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    /* Info message */
    .stInfo {
        background: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    /* Error message */
    .stError {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    /* Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a */
    .element-container {
        margin-bottom: 0.5rem !important;
    }
    
    /* Footer compact */
    hr {
        margin: 2rem 0 1rem 0;
        border-color: #e9ecef;
    }
</style>
""", unsafe_allow_html=True)

def save_uploaded_file(uploaded_file):
    """L∆∞u file t·∫£i l√™n v√†o th∆∞ m·ª•c t·∫°m v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n"""
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        return tmp_file.name

# Ti√™u ƒë·ªÅ
st.title("üéµ T√¨m ki·∫øm nh·∫°c t∆∞∆°ng t·ª±")

# Khu v·ª±c upload ƒë∆°n gi·∫£n
st.markdown("### üìÅ T·∫£i l√™n file nh·∫°c c·ªßa b·∫°n")
uploaded_file = st.file_uploader("Ch·ªçn file √¢m thanh (MP3, WAV, OGG)", type=["mp3", "wav", "ogg"])

# X·ª≠ l√Ω khi c√≥ file upload
if uploaded_file is not None:
    # Hi·ªÉn th·ªã file ƒë√£ upload trong container compact
    with st.container():
        st.markdown("### üéß File c·ªßa b·∫°n:")
        st.audio(uploaded_file)
    
    # X·ª≠ l√Ω t√¨m ki·∫øm
    with st.spinner("ƒêang t√¨m ki·∫øm c√°c b√†i h√°t t∆∞∆°ng t·ª±..."):
        # L∆∞u file t·∫°m
        temp_file_path = save_uploaded_file(uploaded_file)
        
        # Kh·ªüi t·∫°o pipeline v·ªõi database m·ªõi
        db_path = "./database/music_features_new.db"
        pipeline = AudioProcessingPipeline(database_path=db_path, similarity_method="cosine")
        
        # X·ª≠ l√Ω v√† t√¨m ki·∫øm
        start_time = time.time()
        result = pipeline.process(temp_file_path, top_k=3, verbose=False)
        processing_time = time.time() - start_time
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong container
    if result["results"]:
        st.success(f"‚úÖ T√¨m th·∫•y 3 b√†i h√°t t∆∞∆°ng t·ª±! (Th·ªùi gian: {processing_time:.2f}s)")
        
        st.markdown("### üéµ C√°c b√†i h√°t t∆∞∆°ng t·ª±:")
        
        # Hi·ªÉn th·ªã t·ª´ng b√†i h√°t trong container compact
        for i, song in enumerate(result["results"]):
            with st.container():
                st.markdown(f'<div class="result-item">', unsafe_allow_html=True)
                
                # T√™n b√†i h√°t v√† ƒëi·ªÉm s·ªë
                col1, col2 = st.columns([3, 1])
                with col1:
                    file_name = song["filename"].replace('.wav', '').replace('.', ' - ')
                    st.markdown(f"**{i+1}. {file_name}**")
                with col2:
                    similarity = song.get('similarity', 0)
                    st.markdown(f'<div class="similarity-score">{similarity:.1%}</div>', unsafe_allow_html=True)
                
                # Audio player
                song_path = os.path.join("songs", song["filename"])
                if os.path.exists(song_path):
                    st.audio(song_path)
                else:
                    st.error(f"Kh√¥ng t√¨m th·∫•y file: {song['filename']}")
                
                st.markdown('</div>', unsafe_allow_html=True)
    
    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t t∆∞∆°ng t·ª±. Vui l√≤ng th·ª≠ file kh√°c.")
    
    # D·ªçn d·∫πp file t·∫°m
    try:
        os.unlink(temp_file_path)
    except:
        pass

else:
    st.info("üëÜ H√£y t·∫£i l√™n m·ªôt file nh·∫°c ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm!")

# Footer ƒë∆°n gi·∫£n
st.markdown("---")
st.markdown("üí° **H∆∞·ªõng d·∫´n:** T·∫£i l√™n file nh·∫°c v√† h·ªá th·ªëng s·∫Ω t√¨m 3 b√†i h√°t t∆∞∆°ng t·ª± nh·∫•t")

if __name__ == "__main__":
    # Code n√†y s·∫Ω ch·∫°y khi ch·∫°y script tr·ª±c ti·∫øp
    # L·ªánh ch·∫°y: streamlit run streamlit_demo.py
    pass 