import streamlit as st
import os
import time
import tempfile
import pandas as pd
import matplotlib.pyplot as plt
import base64
from audio_processing_pipeline import AudioProcessingPipeline
from visualize_results import visualize_feature_comparison, visualize_similarity_scores, plot_processing_time
import sqlite3

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="H·ªá th·ªëng t√¨m ki·∫øm √¢m nh·∫°c",
    page_icon="üéµ",
    layout="wide"
)

# T√πy ch·ªânh CSS
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
    }
    h1 {
        color: #1E88E5;
        margin-bottom: 0.5rem;
        font-size: 1.8rem;
    }
    h2 {
        font-size: 1.4rem;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }
    h3 {
        font-size: 1.2rem;
        margin-top: 0.4rem;
        margin-bottom: 0.4rem;
    }
    h4, h5 {
        margin-top: 0.3rem;
        margin-bottom: 0.3rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 5px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f2f6;
        border-radius: 4px 4px 0px 0px;
        padding: 5px 15px;
        border: none;
    }
    .stTabs [aria-selected="true"] {
        background-color: #1E88E5;
        color: white;
    }
    .stSlider [data-testid="stThumbValue"] {
        background-color: #1E88E5;
        color: white;
    }
    div.stButton > button:first-child {
        background-color: #1E88E5;
        color: white;
        border: none;
    }
    div.stButton > button:hover {
        background-color: #0D47A1;
        color: white;
        border: none;
    }
    .uploadedFile {
        border: 1px solid #ced4da;
        border-radius: 4px;
        padding: 8px;
        margin-bottom: 8px;
    }
    .audio-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.12);
    }
    .divider {
        margin-top: 0.3rem;
        margin-bottom: 0.3rem;
        border: 0;
        border-top: 1px solid rgba(0,0,0,0.1);
    }
    .result-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        border-left: 4px solid #1E88E5;
    }
    p {
        margin-bottom: 0.3rem;
        margin-top: 0.3rem;
    }
    .stDataFrame {
        margin-bottom: 0.5rem;
    }
    .similarity-score {
        font-weight: bold;
        color: #1E88E5;
    }
    .footer {
        text-align: center;
        color: #666;
        margin-top: 1rem;
        padding-top: 0.3rem;
        border-top: 1px solid rgba(0,0,0,0.1);
    }
    .analysis-section {
        margin-top: 0.3rem;
        margin-bottom: 0.3rem;
    }
    .analysis-item {
        margin-bottom: 0.2rem;
    }
    .stAudio {
        margin-bottom: 0.3rem;
    }
    /* Lo·∫°i b·ªè kho·∫£ng tr·∫Øng c·ªßa Streamlit */
    .stMarkdown {
        margin-bottom: 0 !important;
    }
    .row-widget {
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
    }
    .stExpander {
        margin-bottom: 0.5rem !important;
    }
    .st-emotion-cache-1fttcpj {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }
    .st-emotion-cache-16txtl3 {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }
    .st-emotion-cache-1r6slb0 {
        padding-top: 0.5rem !important;
        padding-bottom: 0.5rem !important;
    }
    .streamlit-expanderHeader {
        margin-top: 0 !important;
        margin-bottom: 0 !important;
    }
    .streamlit-expanderContent {
        padding-top: 0.3rem !important;
    }
    /* Gi·∫£m kho·∫£ng c√°ch trong b·∫£ng k·∫øt qu·∫£ */
    .stDataFrame div[data-testid="stTable"] {
        margin-top: 0 !important;
        margin-bottom: 0.5rem !important;
    }
    /* Gi·∫£m kho·∫£ng c√°ch c√°c tab */
    .stTabs {
        margin-top: 0.5rem !important;
        margin-bottom: 0.5rem !important;
    }
    /* T√πy ch·ªânh thanh tabs */
    [data-baseweb="tab-panel"] {
        padding-top: 0.5rem !important;
    }
    /* Gi·∫£m kho·∫£ng c√°ch header */
    [data-testid="stHeader"] {
        margin-bottom: 0 !important;
    }
    /* Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a ·ªü cu·ªëi */
    .st-emotion-cache-z5fcl4 {
        padding-bottom: 0 !important;
    }
</style>
""", unsafe_allow_html=True)

# C√°c h√†m ti·ªán √≠ch
def check_database(db_path):
    """Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng b√†i h√°t"""
    if not os.path.exists(db_path):
        return 0
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM songs")
        count = cursor.fetchone()[0]
        conn.close()
        return count
    except Exception:
        return 0

def save_uploaded_file(uploaded_file):
    """L∆∞u file t·∫£i l√™n v√†o th∆∞ m·ª•c t·∫°m v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n"""
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        return tmp_file.name

def format_time(seconds):
    """ƒê·ªãnh d·∫°ng th·ªùi gian x·ª≠ l√Ω"""
    return f"{seconds:.2f}s"

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu
st.title("üéµ H·ªá th·ªëng t√¨m ki·∫øm √¢m nh·∫°c d·ª±a tr√™n ƒë·∫∑c tr∆∞ng √¢m thanh")
st.markdown("""
H·ªá th·ªëng n√†y cho ph√©p t√¨m ki·∫øm b√†i h√°t t∆∞∆°ng t·ª± d·ª±a tr√™n ƒë·∫∑c tr∆∞ng √¢m thanh, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p t√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng Cosine Similarity.
""")

# ƒê∆∞·ªùng d·∫´n c∆° s·ªü d·ªØ li·ªáu - ·∫©n, nh∆∞ng v·∫´n s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
db_path = "./database/music_features.db"

# C·ªë ƒë·ªãnh ph∆∞∆°ng ph√°p so s√°nh l√† Cosine Similarity
similarity_method = "cosine"

# C·ªë ƒë·ªãnh s·ªë l∆∞·ª£ng k·∫øt qu·∫£ l√† 3
top_k = 3

# Khu v·ª±c t·∫£i l√™n file
st.markdown("### T·∫£i l√™n file √¢m thanh")
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt file √¢m thanh (MP3, WAV, OGG)", type=["mp3", "wav", "ogg"])

# Ki·ªÉm tra xem c√≥ file ƒë∆∞·ª£c t·∫£i l√™n kh√¥ng
if uploaded_file is not None:
    # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
    with st.spinner("ƒêang x·ª≠ l√Ω..."):
        # L∆∞u file t·∫°m th·ªùi
        temp_file_path = save_uploaded_file(uploaded_file)
        
        # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£ t·∫°m th·ªùi cho bi·ªÉu ƒë·ªì
        results_dir = tempfile.mkdtemp()
        
        # Kh·ªüi t·∫°o pipeline v√† x·ª≠ l√Ω √¢m thanh
        pipeline = AudioProcessingPipeline(database_path=db_path, similarity_method=similarity_method)
        start_time = time.time()
        result = pipeline.process(temp_file_path, top_k=top_k, verbose=False)
        total_time = time.time() - start_time
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    if result["results"]:
        st.success(f"ƒê√£ t√¨m th·∫•y {len(result['results'])} b√†i h√°t t∆∞∆°ng t·ª±! (Th·ªùi gian x·ª≠ l√Ω: {format_time(total_time)})")
        
        # Hi·ªÉn th·ªã th√¥ng tin file ƒë·∫ßu v√†o
        st.markdown("### File √¢m thanh ƒë·∫ßu v√†o")
        st.audio(uploaded_file)
        
        # Th√™m gi·∫£i th√≠ch v·ªÅ k·∫øt qu·∫£ t√¨m ki·∫øm
        with st.expander("Xem gi·∫£i th√≠ch v·ªÅ ph∆∞∆°ng ph√°p ph√¢n t√≠ch", expanded=False):
            st.markdown("""
            H·ªá th·ªëng ƒë√£ ph√¢n t√≠ch c√°c ƒë·∫∑c tr∆∞ng √¢m thanh c·ªßa file b·∫°n t·∫£i l√™n, bao g·ªìm:
            
            1. **RMS Energy**: ƒê·ªô l·ªõn nƒÉng l∆∞·ª£ng c·ªßa √¢m thanh
            2. **Zero-Crossing Rate**: T·∫ßn su·∫•t t√≠n hi·ªáu √¢m thanh thay ƒë·ªïi t·ª´ √¢m sang d∆∞∆°ng
            3. **Spectral Centroid**: Tr·ªçng t√¢m c·ªßa ph·ªï √¢m thanh (li√™n quan ƒë·∫øn "ƒë·ªô s√°ng" c·ªßa √¢m thanh)
            4. **Spectral Bandwidth**: ƒê·ªô r·ªông c·ªßa ph·ªï √¢m thanh
            5. **Spectral Rolloff**: T·∫ßn s·ªë m√† d∆∞·ªõi ƒë√≥ ch·ª©a 85% nƒÉng l∆∞·ª£ng ph·ªï
            6. **Tempo**: Nh·ªãp ƒë·ªô c·ªßa b√†i h√°t
            
            Sau ƒë√≥, h·ªá th·ªëng t√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng Cosine gi·ªØa vector ƒë·∫∑c tr∆∞ng c·ªßa file b·∫°n t·∫£i l√™n v√† c∆° s·ªü d·ªØ li·ªáu, ƒë·ªÉ t√¨m ra 3 b√†i h√°t t∆∞∆°ng t·ª± nh·∫•t.
            """)
        
        st.markdown("### K·∫øt qu·∫£ t∆∞∆°ng t·ª±")
        
        # T·∫°o dataframe ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        results_data = []
        for i, song in enumerate(result["results"]):
            results_data.append({
                "STT": i + 1,
                "T√™n b√†i h√°t": song["filename"].split('.')[0] + "." + song["filename"].split('.')[1],
                "ƒê·ªô t∆∞∆°ng ƒë·ªìng": song.get('similarity', 0)
            })
        
        df = pd.DataFrame(results_data)
        st.dataframe(df, use_container_width=True)
        
        # Hi·ªÉn th·ªã audio player cho m·ªói k·∫øt qu·∫£
        st.markdown("### Nghe th·ª≠")
        for i, song in enumerate(result["results"]):
            with st.container():
                col1, col2 = st.columns([6, 1])
                with col1:
                    # Hi·ªÉn th·ªã t√™n ƒë·∫ßy ƒë·ªß c·ªßa file (kh√¥ng bao g·ªìm ph·∫ßn m·ªü r·ªông)
                    file_name = song["filename"].split('.')
                    display_name = file_name[0] + "." + file_name[1] if len(file_name) > 1 else file_name[0]
                    st.markdown(f"#### {i+1}. {display_name}")
                    
                    # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh t·ª´ t√™n file
                    song_path = os.path.join("songs", song["filename"])
                    
                    if os.path.exists(song_path):
                        st.audio(song_path)
                    else:
                        st.warning(f"Kh√¥ng th·ªÉ t√¨m th·∫•y file √¢m thanh: {song_path}")
                
                with col2:
                    st.markdown(f"<div style='margin-top:25px;'><span class='similarity-score'>{song.get('similarity', 0):.4f}</span></div>", unsafe_allow_html=True)
                
                # Ph·∫ßn ph√¢n t√≠ch
                with st.expander("Xem ph√¢n t√≠ch chi ti·∫øt", expanded=False):
                    features = result.get('features', {})
                    if features and "feature_vector" in features:
                        # L·∫•y c√°c ƒë·∫∑c tr∆∞ng c·ªßa file ƒë·∫ßu v√†o
                        input_features = features.get("feature_vector", [])
                        
                        # Ph√¢n t√≠ch chi ti·∫øt d·ª±a tr√™n ƒëi·ªÉm s·ªë t∆∞∆°ng ƒë·ªìng
                        # T·∫°o m·ªôt ph·∫ßn ph√¢n t√≠ch chi ti·∫øt h∆°n d·ª±a v√†o th·ªÉ lo·∫°i nh·∫°c
                        genre = song['filename'].split('.')[0]  # L·∫•y th·ªÉ lo·∫°i t·ª´ t√™n file
                        
                        # C√°c ƒë·∫∑c tr∆∞ng ƒë∆∞·ª£c m√¥ t·∫£ d·ª±a v√†o th·ªÉ lo·∫°i
                        genre_descriptions = {
                            "blues": "nh·ªãp ƒëi·ªáu ƒë·∫∑c tr∆∞ng, t·∫ßn s·ªë th·∫•p v√† c·∫•u tr√∫c h√≤a √¢m bluesy",
                            "classical": "d·∫£i ƒë·ªông r·ªông, c·∫•u tr√∫c ph·ªï ph·ª©c t·∫°p v√† th√†nh ph·∫ßn h√†i h√≤a",
                            "country": "√¢m s·∫Øc gi·ªçng h√°t ƒë·∫∑c tr∆∞ng, nh·ªãp ƒëi·ªáu ·ªïn ƒë·ªãnh v√† t·∫ßn s·ªë trung b√¨nh",
                            "disco": "nh·ªãp b·ªën ph·∫ßn t∆∞ n·ªïi b·∫≠t, t·∫ßn s·ªë tr·∫ßm m·∫°nh v√† nƒÉng l∆∞·ª£ng cao ƒë·ªÅu ƒë·∫∑n",
                            "hiphop": "nh·ªãp ƒëi·ªáu ƒë·∫≠p m·∫°nh, t·∫ßn s·ªë th·∫•p n·ªïi b·∫≠t v√† c·∫•u tr√∫c beat ƒë·∫∑c tr∆∞ng",
                            "jazz": "c·∫•u tr√∫c h√≤a √¢m ph·ª©c t·∫°p, ph·ªï t·∫ßn s·ªë ƒëa d·∫°ng v√† t√≠nh ·ª©ng t√°c",
                            "metal": "nƒÉng l∆∞·ª£ng cao, nhi·ªÅu t·∫ßn s·ªë cao v√† th√†nh ph·∫ßn nhi·ªÖu",
                            "pop": "c·∫•u tr√∫c giai ƒëi·ªáu r√µ r√†ng, nƒÉng l∆∞·ª£ng trung b√¨nh v√† t·∫ßn s·ªë c√¢n b·∫±ng",
                            "reggae": "nh·ªãp ƒëi·ªáu off-beat ƒë·∫∑c tr∆∞ng, t·∫ßn s·ªë tr·∫ßm m·∫°nh v√† nh·ªãp ƒë·ªô ch·∫≠m h∆°n",
                            "rock": "nƒÉng l∆∞·ª£ng cao, d·∫£i t·∫ßn s·ªë r·ªông v√† c∆∞·ªùng ƒë·ªô √¢m thanh ƒë·∫∑c tr∆∞ng"
                        }
                        
                        genre_desc = genre_descriptions.get(genre, "ƒë·∫∑c tr∆∞ng √¢m thanh ri√™ng bi·ªát")
                        
                        similarity_level = ""
                        if song.get('similarity', 0) > 0.95:
                            similarity_level = "c·ª±c k·ª≥"
                        elif song.get('similarity', 0) > 0.85:
                            similarity_level = "r·∫•t"
                        elif song.get('similarity', 0) > 0.7:
                            similarity_level = "kh√°"
                        else:
                            similarity_level = "c√≥ m·ªôt s·ªë"
                        
                        st.markdown(f"B√†i h√°t n√†y <strong>{similarity_level}</strong> t∆∞∆°ng ƒë·ªìng v·ªõi file c·ªßa b·∫°n.", unsafe_allow_html=True)
                        
                        cols = st.columns(2)
                        with cols[0]:
                            st.markdown(f"**ƒê·∫∑c tr∆∞ng nƒÉng l∆∞·ª£ng**: C·∫•u tr√∫c nƒÉng l∆∞·ª£ng √¢m thanh {similarity_level} gi·ªëng v·ªõi file c·ªßa b·∫°n.")
                            st.markdown(f"**C·∫•u tr√∫c nh·ªãp ƒëi·ªáu**: C√≥ s·ª± t∆∞∆°ng ƒë·ªìng v·ªÅ t·ªëc ƒë·ªô v√† nh·ªãp ƒëi·ªáu.")
                        
                        with cols[1]:
                            st.markdown(f"**√Çm s·∫Øc**: Ph·ªï t·∫ßn s·ªë c√≥ c·∫•u tr√∫c t∆∞∆°ng t·ª± v·ªõi file c·ªßa b·∫°n.")
                            st.markdown(f"**ƒê·∫∑c ƒëi·ªÉm th·ªÉ lo·∫°i**: Th·ªÉ lo·∫°i {genre} v·ªõi {genre_desc}.")
                        
                        # Th√™m ph√¢n t√≠ch c·ª• th·ªÉ cho m·ªói th·ªÉ lo·∫°i
                        if genre == "blues":
                            st.markdown("B·∫£n blues n√†y c√≥ c·∫•u tr√∫c h√≤a √¢m ƒë·∫∑c tr∆∞ng v·ªõi qu√£ng 7, t·∫°o n√™n √¢m h∆∞·ªüng t∆∞∆°ng t·ª± v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "classical":
                            st.markdown("B·∫£n nh·∫°c c·ªï ƒëi·ªÉn n√†y chia s·∫ª c·∫•u tr√∫c ƒë·ªông v√† s·ª± bi·∫øn ƒë·ªïi v·ªÅ c∆∞·ªùng ƒë·ªô v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "country":
                            st.markdown("B√†i country n√†y c√≥ √¢m s·∫Øc t∆∞∆°i s√°ng v√† ti·∫øt t·∫•u ·ªïn ƒë·ªãnh, t·∫°o n√™n ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "disco":
                            st.markdown("ƒê·∫∑c tr∆∞ng disco v·ªõi nh·ªãp ƒë·∫≠p n·ªïi b·∫≠t v√† c·∫•u tr√∫c ti·∫øt t·∫•u l·∫∑p l·∫°i khi·∫øn b√†i h√°t n√†y c√≥ ƒëi·ªÉm chung v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "hiphop":
                            st.markdown("Nh·ªãp beat m·∫°nh m·∫Ω v√† c·∫•u tr√∫c ƒë·∫∑c tr∆∞ng c·ªßa hip-hop trong b√†i n√†y t·∫°o ra nƒÉng l∆∞·ª£ng t∆∞∆°ng t·ª± v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "jazz":
                            st.markdown("C·∫•u tr√∫c h√≤a √¢m phong ph√∫ v√† s·ª± ƒëa d·∫°ng v·ªÅ t·∫ßn s·ªë trong b√†i jazz n√†y t∆∞∆°ng ƒë·ªìng v·ªõi c√°c ƒë·∫∑c ƒëi·ªÉm trong file c·ªßa b·∫°n.")
                        elif genre == "metal":
                            st.markdown("NƒÉng l∆∞·ª£ng cao v√† c·∫•u tr√∫c ph·ªï t·∫ßn s·ªë ph·ª©c t·∫°p c·ªßa b√†i metal n√†y ph√π h·ª£p v·ªõi ƒë·∫∑c ƒëi·ªÉm √¢m thanh trong file c·ªßa b·∫°n.")
                        elif genre == "pop":
                            st.markdown("S·ª± c√¢n b·∫±ng v·ªÅ t·∫ßn s·ªë v√† c·∫•u tr√∫c r√µ r√†ng c·ªßa b√†i pop n√†y c√≥ nhi·ªÅu ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng v·ªõi c·∫•u tr√∫c √¢m thanh trong file c·ªßa b·∫°n.")
                        elif genre == "reggae":
                            st.markdown("Nh·ªãp ƒëi·ªáu off-beat ƒë·∫∑c tr∆∞ng v√† t·∫ßn s·ªë tr·∫ßm n·ªïi b·∫≠t c·ªßa reggae trong b√†i n√†y t·∫°o n√™n s·ª± t∆∞∆°ng ƒë·ªìng v·ªõi file c·ªßa b·∫°n.")
                        elif genre == "rock":
                            st.markdown("NƒÉng l∆∞·ª£ng cao v√† s·ª± c√¢n b·∫±ng gi·ªØa c√°c d·∫£i t·∫ßn s·ªë c·ªßa b√†i rock n√†y kh√° t∆∞∆°ng ƒë·ªìng v·ªõi c·∫•u tr√∫c ph·ªï trong file c·ªßa b·∫°n.")
            
            # Th√™m m·ªôt divider nh·ªè gi·ªØa c√°c b√†i h√°t
            if i < len(result["results"]) - 1:
                st.markdown("<hr style='margin: 5px 0; border-width: 1px 0 0 0; border-style: solid; border-color: #f0f0f0;'>", unsafe_allow_html=True)
        
        # Tab 2: Bi·ªÉu ƒë·ªì so s√°nh
        st.markdown("### So s√°nh ƒë·∫∑c tr∆∞ng √¢m thanh")
        with st.expander("Xem bi·ªÉu ƒë·ªì so s√°nh", expanded=False):
            # T·∫°o bi·ªÉu ƒë·ªì so s√°nh ƒë·∫∑c tr∆∞ng
            try:
                fig1, _ = visualize_feature_comparison(
                    temp_file_path, 
                    result['results'], 
                    db_path
                )
                st.pyplot(fig1)
            except Exception as e:
                st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì so s√°nh ƒë·∫∑c tr∆∞ng: {e}")
            
            # T·∫°o bi·ªÉu ƒë·ªì ƒëi·ªÉm s·ªë t∆∞∆°ng ƒë·ªìng
            try:
                fig2, _ = visualize_similarity_scores(
                    result['results'],
                    similarity_method
                )
                st.pyplot(fig2)
            except Exception as e:
                st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì ƒëi·ªÉm s·ªë t∆∞∆°ng ƒë·ªìng: {e}")
    else:
        st.error("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p. Vui l√≤ng th·ª≠ file kh√°c ho·∫∑c ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu.")
    
    # D·ªçn d·∫πp file t·∫°m th·ªùi
    try:
        os.unlink(temp_file_path)
    except:
        pass

# Th√™m th√¥ng tin footer
st.markdown("<div class='footer'>H·ªá th·ªëng t√¨m ki·∫øm √¢m nh·∫°c d·ª±a tr√™n ƒë·∫∑c tr∆∞ng √¢m thanh ‚Ä¢ 2023</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    # Code n√†y s·∫Ω ch·∫°y khi ch·∫°y script tr·ª±c ti·∫øp
    # L·ªánh ch·∫°y: streamlit run streamlit_demo.py
    pass 